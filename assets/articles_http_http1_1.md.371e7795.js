import{o as e,c as l,d as t}from"./app.be2d3ad2.js";const a='{"title":"HTTP 1.1","description":"","frontmatter":{},"headers":[{"level":2,"title":"HTTP请求的组成","slug":"http请求的组成"},{"level":3,"title":"Method 请求方式","slug":"method-请求方式"},{"level":3,"title":"Path 路径","slug":"path-路径"},{"level":3,"title":"HTTP协议的版本","slug":"http协议的版本"},{"level":3,"title":"Header 请求头","slug":"header-请求头"},{"level":2,"title":"HTTP响应的组成","slug":"http响应的组成"},{"level":3,"title":"状态码 & 状态消息","slug":"状态码-状态消息"}],"relativePath":"articles/http/http1_1.md","lastUpdated":1628319049743}',r={},i=t('<p>本篇文章收集了一些HTTP1.1的基本知识点，内容多有误，仅供参考。</p><h1 id="http-1-1"><a class="header-anchor" href="#http-1-1" aria-hidden="true">#</a> HTTP 1.1</h1><p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616.html" target="_blank" rel="noopener noreferrer">HTTP 1.1</a>看懂了这个协议HTTP协议的知识就掌握了80%了。</p><p>下面是我扣的HTTP1.1的协议中的重点。（为什么是HTTP1.1,因为1.0太老，1.2和2.0对协议内容没有大改动）</p><h2 id="http请求的组成"><a class="header-anchor" href="#http请求的组成" aria-hidden="true">#</a> HTTP请求的组成</h2><ul><li>Method</li><li>Path</li><li>Version of HTTP</li><li>Headers</li><li>Body</li></ul><h3 id="method-请求方式"><a class="header-anchor" href="#method-请求方式" aria-hidden="true">#</a> Method 请求方式</h3><ul><li>GET 请求一个指定资源的表示形式. 使用GET的请求应该只被用于获取数据.</li><li>HEAD 请求一个与GET请求的响应相同的响应，但没有响应体.</li><li>POST 用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用.</li><li>PATCH 于对资源应用部分修改。</li><li>DELETE 删除指定的资源。</li><li>PUT 用请求有效载荷替换目标资源的所有当前表示。</li><li>CONNECT 建立一个到由目标资源标识的服务器的隧道。</li><li>OPTIONS 用于描述目标资源的通信选项。</li><li>TRACE 沿着到目标资源的路径执行一个消息环回测试。</li></ul><h3 id="path-路径"><a class="header-anchor" href="#path-路径" aria-hidden="true">#</a> Path 路径</h3><p>资源的地址</p><h3 id="http协议的版本"><a class="header-anchor" href="#http协议的版本" aria-hidden="true">#</a> HTTP协议的版本</h3><p>当前主流版本 http1.1 http1.2 http2.0</p><h3 id="header-请求头"><a class="header-anchor" href="#header-请求头" aria-hidden="true">#</a> Header 请求头</h3><p>很多很多字段，就不搬了<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers" target="_blank" rel="noopener noreferrer">看详情吧</a>。设置Content-Type是用的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener noreferrer">MIME</a>标准还是要看看</p><h2 id="http响应的组成"><a class="header-anchor" href="#http响应的组成" aria-hidden="true">#</a> HTTP响应的组成</h2><ul><li>Version of HTTP</li><li>Status Code</li><li>Status Message</li><li>Headers</li><li>Body</li></ul><h3 id="状态码-状态消息"><a class="header-anchor" href="#状态码-状态消息" aria-hidden="true">#</a> 状态码 &amp; 状态消息</h3><p>HTTP 响应状态代码指示特定 HTTP 请求是否已成功完成。响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599) 常见：</p><ul><li><p>200 OK 请求成功。成功的含义取决于HTTP方法： GET：资源已被提取并在消息正文中传输。 HEAD：实体标头位于消息正文中。 POST：描述动作结果的资源在消息体中传输。 TRACE：消息正文包含服务器收到的请求消息</p></li><li><p>400 Bad Request 1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。 2、请求参数有误。</p></li><li><p>403 Forbidden 服务器已经理解请求，但是拒绝执行它。与 401 响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个 404 响应，假如它不希望让客户端获得任何信息。</p></li><li><p>404 Not Found 请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p></li><li><p>405 Method Not Allowed 请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p></li><li><p>408 Request Timeout 请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</p></li><li><p>500 Internal Server Error 服务器遇到了不知道如何处理的情况。</p></li><li><p>501 Not Implemented 此请求方法不被服务器支持且无法被处理。只有GET和HEAD是要求服务器支持的，它们必定不会返回此错误代码。</p></li><li><p>502 Bad Gateway 此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</p></li><li><p>503 Service Unavailable 服务器没有准备好处理请求。 常见原因是服务器因维护或重载而停机。 请注意，与此响应一起，应发送解释问题的用户友好页面。 这个响应应该用于临时条件和 Retry-After：如果可能的话，HTTP头应该包含恢复服务之前的估计时间。 网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。</p></li><li><p>504 Gateway Timeout 当服务器作为网关，不能及时得到响应时返回此错误代码。</p></li><li><p>505 HTTP Version Not Supported 服务器不支持请求中所使用的HTTP协议版本。</p></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" target="_blank" rel="noopener noreferrer">全部状态码</a></p>',20);r.render=function(t,a,r,h,p,d){return e(),l("div",null,[i])};export default r;export{a as __pageData};
