import{o as a,c as n,d as s}from"./app.dc8a24b8.js";const t='{"title":"JavaScript","description":"","frontmatter":{},"headers":[{"level":2,"title":"入门","slug":"入门"},{"level":3,"title":"JavaScript的加载","slug":"javascript的加载"},{"level":2,"title":"JavaScript 基础","slug":"javascript-基础"},{"level":2,"title":"对象入门","slug":"对象入门"},{"level":2,"title":"当前状况","slug":"当前状况"},{"level":2,"title":"语法","slug":"语法"},{"level":2,"title":"使用场景","slug":"使用场景"},{"level":2,"title":"相关的库","slug":"相关的库"}],"relativePath":"articles/javascript/index.md","lastUpdated":1657778376908}',p={},e=s('<h1 id="javascript"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h1><p>解释型或即时编译型的编程语言。</p><h2 id="入门"><a class="header-anchor" href="#入门" aria-hidden="true">#</a> 入门</h2><p>JavaScript入门知识</p><h3 id="javascript的加载"><a class="header-anchor" href="#javascript的加载" aria-hidden="true">#</a> JavaScript的加载</h3><ul><li>在head元素中使用script元素加载（<a href="https://javascript.info/script-async-defer%EF%BC%89" target="_blank" rel="noopener noreferrer">https://javascript.info/script-async-defer）</a></li></ul><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>./main.js<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>./main.js<span class="token punctuation">&#39;</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>./main.js<span class="token punctuation">&#39;</span></span> <span class="token attr-name">async</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><ul><li>动态加载（<a href="https://javascript.info/script-async-defer%EF%BC%89" target="_blank" rel="noopener noreferrer">https://javascript.info/script-async-defer）</a></li></ul><div class="language-javascript"><pre><code><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nscript<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;/article/script-async-defer/long.js&quot;</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><h2 id="javascript-基础"><a class="header-anchor" href="#javascript-基础" aria-hidden="true">#</a> JavaScript 基础</h2><ul><li>变量声明方式 const, let ,var</li><li>基本数据类型: string，number，bigint，boolean，null，undefined，symbol (ECMAScript 2016新增)。 基本类型值可以被替换，但不能被改变。</li><li>包装对象（wrapper object): String, Number, Boolean, Symbol 基本类型除了null和undefined之外都有包装对象，用于处理基本类型的一些基本操作。</li></ul><div class="language-js"><pre><code><span class="token comment">// custom wrapper object</span>\n<span class="token keyword">function</span> <span class="token function">WrapperString</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> stringValue <span class="token operator">=</span> value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">WrapperString</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token string">&#39;&#39;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> stringValue\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token function">WrapperString</span><span class="token punctuation">(</span><span class="token number">5.6</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> strObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WrapperString</span><span class="token punctuation">(</span><span class="token number">5.6</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">,</span> <span class="token keyword">typeof</span> strObject<span class="token punctuation">)</span>\n<span class="token comment">//string, object</span>\n</code></pre></div><p>原型链： constructor prototype <strong>proto</strong></p><h2 id="对象入门"><a class="header-anchor" href="#对象入门" aria-hidden="true">#</a> 对象入门</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes</a></p><h2 id="当前状况"><a class="header-anchor" href="#当前状况" aria-hidden="true">#</a> 当前状况</h2><h2 id="语法"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><h2 id="使用场景"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><h2 id="相关的库"><a class="header-anchor" href="#相关的库" aria-hidden="true">#</a> 相关的库</h2>',20);p.render=function(s,t,p,o,c,l){return a(),n("div",null,[e])};export default p;export{t as __pageData};
